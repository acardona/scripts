# Util functions for parsing CSV files, primarily generated by CATMAID.
# Albert Cardona 2018
#
# TODO: replace with perhaps one-liner calls to the pandas library functions

def parseQuotedLabels(line):
    """ Tokenize a sequence of double-quoted strings, each considered a token.
        Separators between tokens are ignored, there may be none.
        Assumes there aren't any double quotes inside a quoted label.
    """
    labels = []
    i2 = 0
    while True:
        i1 = line.find('"', i2)
        if -1 == i1:
            return labels
        i2 = line.find('"', i1+1)
        labels.append(line[i1+1 : i2])
        i2 += 1

    return None


def parseLabeledMatrix(filename, cast=int, separator=","):
    """
    Parses a CSV file where the first row and the first column contain
    the row and column labels as double-quoted strings,
    and the rest contain integers.
    Assumes labels are contained within double quotes that might contain the separator.
    Example CSV file:

"", "MBON-a1 left", "MBON-a1 right", "MBON-a2 left", "MBON-a2 right", "MBON-b1 left", "MBON-b1 right", "MBON-b2 left", "MBON-b2 right"
"MBIN-b1 left", 0, 0, 0, 2, 0, 18, 0, 12
"MBIN-b1 right", 0, 0, 1, 0, 20, 0, 11, 0
"MBIN-b2 left", 0, 0, 0, 1, 0, 14, 0, 12
"MBIN-b2 right", 1, 0, 1, 0, 15, 0, 12, 0
"OAN-a1", 3, 6, 14, 10, 0, 0, 0, 0
"OAN-a2", 2, 11, 10, 11, 0, 0, 0, 0

    Returns a tuple with:
      0: the data as a list (of rows) of lists (the column values of each row)
      1: a list of row names
      2: a list of column names, without the first empty label

    """

    matrix = []
    row_names = []
    column_names = None

    with open(filename, 'r') as f:
        for i, line in enumerate(f):
            # First line contains names of postsynaptic neurons
            if 0 == i:
                column_names = parseQuotedLabels(line)[1:] # remove first one, which is empty and a placeholder for the row names column.
                continue
            # Find first token: neuron name that can contain comas
            i1 = line.find('"')
            i2 = line.find('"', i1 + 1)
            row_names.append(line[i1+1:i2])
            # Parse matrix values starting after first comma outside quotes
            first_comma = line.find(separator, i2)
            synapse_counts = [cast(val) for val in line[first_comma+1:].split(separator)]
            # Accummulate
            matrix.append(synapse_counts)

    return row_names, column_names, matrix


